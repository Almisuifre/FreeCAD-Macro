__title__   = "Exportation "
__author__  = "Almisuifre"
__version__ = "00.01"
__date__    = "09/05/2018"


import FreeCAD, FreeCADGui, Part, PartGui, math, ImportGui, importOBJ, Mesh
from FreeCAD import Base
from PySide import QtGui, QtCore
#from math import cos, radians
App = FreeCAD
Gui = FreeCADGui
 
# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
#
# Class
#

class p():
	
	def priSm(self):
 
		try:
			""" ? """
		except:
			FreeCAD.Console.PrintError("Unable to complete task")
	
			self.close()

#
# Close popup
#
	def close(self):
		self.dialog.hide()
	
#
# Export to file fcstd
#
	def modele_export(self):
		#Selected ?
		sel = FreeCADGui.Selection.getSelection()

		if not sel :	
			#Not selected, popup Error
			reply = QtGui.QMessageBox.information(None, "", "Error ! You have note selected object to export !", QtGui.QMessageBox.Yes)
			if reply == QtGui.QMessageBox.Yes:
				self.dialog.hide()
		else :
			# -> Select object ok, search directory place to export file

			#File Block
			fileName = QtGui.QFileDialog().getExistingDirectory(None, 'Output directory', QtCore.QDir.homePath(), QtGui.QFileDialog.ShowDirsOnly)

			#FCSTD Block
			dirCompletedFCSTD = fileName + "\\" + self.d1.text() + ".FCStd"
			FreeCAD.ActiveDocument.saveAs(dirCompletedFCSTD)

			self.dialog.hide()

#
# Export to file fcstd and stl to print
#
	def modele_stl_export(self):
		#Selected ?
		sel = FreeCADGui.Selection.getSelection()

		if not sel :	
			#Not selected, popup Error
			reply = QtGui.QMessageBox.information(None, "", "Error ! You have note selected object to export !", QtGui.QMessageBox.Yes)
			if reply == QtGui.QMessageBox.Yes:
				self.dialog.hide()
		else :
			# -> Select object ok, search directory place to export file

			#File Block
			fileName = QtGui.QFileDialog().getExistingDirectory(None, 'Output directory', QtCore.QDir.homePath(), QtGui.QFileDialog.ShowDirsOnly)

			#Bloc active document
			doc = FreeCAD.ActiveDocument
			if doc == None:
				doc = FreeCAD.newDocument()

			#FCSTD Block
			dirCompletedFCSTD = fileName + "\\" + self.d1.text() + ".FCStd"
			FreeCAD.ActiveDocument.saveAs(dirCompletedFCSTD)

			#STL Block
			dirCompletedSTL = fileName + "\\" + self.d1.text() + ".stl"

			__objs__=[]
			__objs__.append(doc.getObject(sel[0].Name))
			Mesh.export(__objs__, dirCompletedSTL)
			
			#Delet and hide popup
			del __objs__
			self.dialog.hide()

			#Debug
			#FreeCAD.Console.PrintMessage( self.doc )
			#FreeCAD.Console.PrintMessage( " - " )
			#FreeCAD.Console.PrintMessage( "Ok\n" )

#
# Export to file fcstd, stl and step to print and assembly
#

	def modele_stl_step_export(self):
		#Selected ?
		sel = FreeCADGui.Selection.getSelection()

		if not sel :	
			#Not selected, popup Error
			reply = QtGui.QMessageBox.information(None, "", "Error ! You have note selected object to export !", QtGui.QMessageBox.Yes)
			if reply == QtGui.QMessageBox.Yes:
				self.dialog.hide()
		else :
			# -> Select object ok, search directory place to export file

			#File Block
			fileName = QtGui.QFileDialog().getExistingDirectory(None, 'Output directory', QtCore.QDir.homePath(), QtGui.QFileDialog.ShowDirsOnly)

			#Bloc active document
			doc = FreeCAD.ActiveDocument
			if doc == None:
				doc = FreeCAD.newDocument()

			#FCSTD Block
			dirCompletedFCSTD = fileName + "\\" + self.d1.text() + ".FCStd"
			FreeCAD.ActiveDocument.saveAs(dirCompletedFCSTD)

			#STL Block
			dirCompletedSTL = fileName + "\\" + self.d1.text() + ".stl"

			__objs__=[]
			__objs__.append(doc.getObject(sel[0].Name))
			Mesh.export(__objs__, dirCompletedSTL)

			#STEP Block
			dirCompletedSTEP = fileName + "\\" + self.d1.text() + ".step"
			__objs__=[]
			__objs__.append(doc.getObject(sel[0].Name))
			ImportGui.export(__objs__, dirCompletedSTEP)
			
			#Delet and hide popup
			del __objs__
			self.dialog.hide()

#
# Export to file fcstd and wrl to kicad component
#
	def modele_wrl_export(self):
		#Selected ?
		sel = FreeCADGui.Selection.getSelection()

		if not sel :	
			#Not selected, popup Error
			reply = QtGui.QMessageBox.information(None, "", "Error ! You have note selected object to export !", QtGui.QMessageBox.Yes)
			if reply == QtGui.QMessageBox.Yes:
				self.dialog.hide()
		else :
			# -> Select object ok, search directory place to export file

			#File Block
			fileName = QtGui.QFileDialog().getExistingDirectory(None, 'Output directory', QtCore.QDir.homePath(), QtGui.QFileDialog.ShowDirsOnly)

			#Bloc active document
			doc = FreeCAD.ActiveDocument
			if doc == None:
				doc = FreeCAD.newDocument()

			#FCSTD Block
			dirCompletedFCSTD = fileName + "\\" + self.d1.text() + ".FCStd"
			FreeCAD.ActiveDocument.saveAs(dirCompletedFCSTD)

			#WRL Block
			dirCompletedWRL = fileName + "\\" + self.d1.text() + ".wrl"
			__objs__=[]
			__objs__.append(doc.getObject(sel[0].Name))
			FreeCADGui.export(__objs__, dirCompletedWRL)
			
			#Delet and hide popup
			del __objs__
			self.dialog.hide()

#
# Export to file fcstd and obj to blender renderer
#

	def modele_obj_export(self):
		#Selected ?
		sel = FreeCADGui.Selection.getSelection()

		if not sel :	
			#Not selected, popup Error
			reply = QtGui.QMessageBox.information(None, "", "Error ! You have note selected object to export !", QtGui.QMessageBox.Yes)
			if reply == QtGui.QMessageBox.Yes:
				self.dialog.hide()
		else :
			# -> Select object ok, search directory place to export file

			#File Block
			fileName = QtGui.QFileDialog().getExistingDirectory(None, 'Output directory', QtCore.QDir.homePath(), QtGui.QFileDialog.ShowDirsOnly)

			#Bloc active document
			doc = FreeCAD.ActiveDocument
			if doc == None:
				doc = FreeCAD.newDocument()

			#FCSTD Block
			dirCompletedFCSTD = fileName + "\\" + self.d1.text() + ".FCStd"
			FreeCAD.ActiveDocument.saveAs(dirCompletedFCSTD)

			#OBJ Block
			dirCompletedOBJ = fileName + "\\" + self.d1.text() + ".obj"
			__objs__=[]
			__objs__.append(doc.getObject(sel[0].Name))
			importOBJ.export(__objs__, dirCompletedOBJ)
			
			#Delet and hide popup
			del __objs__
			self.dialog.hide()

# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
#
# Make dialog box and get input for distance between flats, number of sides, and height
#

	def __init__(self):
		#Bloc active document
		doc = FreeCAD.ActiveDocument.Label
		
		#Bloc window
		self.dialog = None
	
		self.dialog = QtGui.QDialog()
		self.dialog.resize(280,110)
	
		self.dialog.setWindowTitle("Exportation")
		la = QtGui.QVBoxLayout(self.dialog)
		
		iN1 = QtGui.QLabel("Non du fichier")
		la.addWidget(iN1)
		self.d1 = QtGui.QLineEdit()
		self.d1.setText(doc)
		la.addWidget(self.d1)	

		iN2 = QtGui.QLabel("Exportation vers modele")
		la.addWidget(iN2)
		self.d2 = QtGui.QPushButton('.fcstd', iN2)
		la.addWidget(self.d2)

		iN3 = QtGui.QLabel("Exportation vers modele et stl")
		la.addWidget(iN3)
		self.d3 = QtGui.QPushButton('.fcstd et .stl', iN3)
		la.addWidget(self.d3)

		iN4 = QtGui.QLabel("Exportation vers modele, stl et step")
		la.addWidget(iN4)
		self.d4 = QtGui.QPushButton('.fcstd, .stl et .step', iN4)
		la.addWidget(self.d4)

		iN5 = QtGui.QLabel("Exportation pour Kicad : modele et wrl")
		la.addWidget(iN5)
		self.d5 = QtGui.QPushButton('.fcstd et .wrl', iN5)
		la.addWidget(self.d5)

		iN6 = QtGui.QLabel("Exportation pour Blender : modele et obj")
		la.addWidget(iN6)
		self.d6 = QtGui.QPushButton('.fcstd et .obj', iN6)
		la.addWidget(self.d6)
	
		okbox = QtGui.QDialogButtonBox(self.dialog)
		okbox.setOrientation(QtCore.Qt.Horizontal)
		okbox.setStandardButtons(QtGui.QDialogButtonBox.Cancel)
		la.addWidget(okbox)

		self.d2.clicked.connect(self.modele_export)
		self.d3.clicked.connect(self.modele_stl_export)
		self.d4.clicked.connect(self.modele_stl_step_export)

		self.d5.clicked.connect(self.modele_wrl_export)
		self.d6.clicked.connect(self.modele_obj_export)
		
		QtCore.QObject.connect(okbox, QtCore.SIGNAL("rejected()"), self.close)
		QtCore.QMetaObject.connectSlotsByName(self.dialog)
		self.dialog.show()
		self.dialog.exec_()

p() 
